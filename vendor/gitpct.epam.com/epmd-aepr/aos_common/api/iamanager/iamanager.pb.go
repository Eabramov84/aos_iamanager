// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iamanager.proto

package iamanager

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetCertTypesRsp struct {
	Types                []string `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertTypesRsp) Reset()         { *m = GetCertTypesRsp{} }
func (m *GetCertTypesRsp) String() string { return proto.CompactTextString(m) }
func (*GetCertTypesRsp) ProtoMessage()    {}
func (*GetCertTypesRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{0}
}

func (m *GetCertTypesRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertTypesRsp.Unmarshal(m, b)
}
func (m *GetCertTypesRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertTypesRsp.Marshal(b, m, deterministic)
}
func (m *GetCertTypesRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertTypesRsp.Merge(m, src)
}
func (m *GetCertTypesRsp) XXX_Size() int {
	return xxx_messageInfo_GetCertTypesRsp.Size(m)
}
func (m *GetCertTypesRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertTypesRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertTypesRsp proto.InternalMessageInfo

func (m *GetCertTypesRsp) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type ClearReq struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearReq) Reset()         { *m = ClearReq{} }
func (m *ClearReq) String() string { return proto.CompactTextString(m) }
func (*ClearReq) ProtoMessage()    {}
func (*ClearReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{1}
}

func (m *ClearReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClearReq.Unmarshal(m, b)
}
func (m *ClearReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClearReq.Marshal(b, m, deterministic)
}
func (m *ClearReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearReq.Merge(m, src)
}
func (m *ClearReq) XXX_Size() int {
	return xxx_messageInfo_ClearReq.Size(m)
}
func (m *ClearReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClearReq proto.InternalMessageInfo

func (m *ClearReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type SetOwnerReq struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetOwnerReq) Reset()         { *m = SetOwnerReq{} }
func (m *SetOwnerReq) String() string { return proto.CompactTextString(m) }
func (*SetOwnerReq) ProtoMessage()    {}
func (*SetOwnerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{2}
}

func (m *SetOwnerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetOwnerReq.Unmarshal(m, b)
}
func (m *SetOwnerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetOwnerReq.Marshal(b, m, deterministic)
}
func (m *SetOwnerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOwnerReq.Merge(m, src)
}
func (m *SetOwnerReq) XXX_Size() int {
	return xxx_messageInfo_SetOwnerReq.Size(m)
}
func (m *SetOwnerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOwnerReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetOwnerReq proto.InternalMessageInfo

func (m *SetOwnerReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SetOwnerReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateKeysReq struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateKeysReq) Reset()         { *m = CreateKeysReq{} }
func (m *CreateKeysReq) String() string { return proto.CompactTextString(m) }
func (*CreateKeysReq) ProtoMessage()    {}
func (*CreateKeysReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{3}
}

func (m *CreateKeysReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateKeysReq.Unmarshal(m, b)
}
func (m *CreateKeysReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateKeysReq.Marshal(b, m, deterministic)
}
func (m *CreateKeysReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateKeysReq.Merge(m, src)
}
func (m *CreateKeysReq) XXX_Size() int {
	return xxx_messageInfo_CreateKeysReq.Size(m)
}
func (m *CreateKeysReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateKeysReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateKeysReq proto.InternalMessageInfo

func (m *CreateKeysReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateKeysReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateKeysRsp struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Csr                  string   `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateKeysRsp) Reset()         { *m = CreateKeysRsp{} }
func (m *CreateKeysRsp) String() string { return proto.CompactTextString(m) }
func (*CreateKeysRsp) ProtoMessage()    {}
func (*CreateKeysRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{4}
}

func (m *CreateKeysRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateKeysRsp.Unmarshal(m, b)
}
func (m *CreateKeysRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateKeysRsp.Marshal(b, m, deterministic)
}
func (m *CreateKeysRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateKeysRsp.Merge(m, src)
}
func (m *CreateKeysRsp) XXX_Size() int {
	return xxx_messageInfo_CreateKeysRsp.Size(m)
}
func (m *CreateKeysRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateKeysRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateKeysRsp proto.InternalMessageInfo

func (m *CreateKeysRsp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateKeysRsp) GetCsr() string {
	if m != nil {
		return m.Csr
	}
	return ""
}

type ApplyCertReq struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Cert                 string   `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyCertReq) Reset()         { *m = ApplyCertReq{} }
func (m *ApplyCertReq) String() string { return proto.CompactTextString(m) }
func (*ApplyCertReq) ProtoMessage()    {}
func (*ApplyCertReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{5}
}

func (m *ApplyCertReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyCertReq.Unmarshal(m, b)
}
func (m *ApplyCertReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyCertReq.Marshal(b, m, deterministic)
}
func (m *ApplyCertReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyCertReq.Merge(m, src)
}
func (m *ApplyCertReq) XXX_Size() int {
	return xxx_messageInfo_ApplyCertReq.Size(m)
}
func (m *ApplyCertReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyCertReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyCertReq proto.InternalMessageInfo

func (m *ApplyCertReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApplyCertReq) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

type ApplyCertRsp struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CertUrl              string   `protobuf:"bytes,2,opt,name=cert_url,json=certUrl,proto3" json:"cert_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyCertRsp) Reset()         { *m = ApplyCertRsp{} }
func (m *ApplyCertRsp) String() string { return proto.CompactTextString(m) }
func (*ApplyCertRsp) ProtoMessage()    {}
func (*ApplyCertRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{6}
}

func (m *ApplyCertRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyCertRsp.Unmarshal(m, b)
}
func (m *ApplyCertRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyCertRsp.Marshal(b, m, deterministic)
}
func (m *ApplyCertRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyCertRsp.Merge(m, src)
}
func (m *ApplyCertRsp) XXX_Size() int {
	return xxx_messageInfo_ApplyCertRsp.Size(m)
}
func (m *ApplyCertRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyCertRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyCertRsp proto.InternalMessageInfo

func (m *ApplyCertRsp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApplyCertRsp) GetCertUrl() string {
	if m != nil {
		return m.CertUrl
	}
	return ""
}

type GetCertReq struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Issuer               []byte   `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Serial               string   `protobuf:"bytes,3,opt,name=serial,proto3" json:"serial,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertReq) Reset()         { *m = GetCertReq{} }
func (m *GetCertReq) String() string { return proto.CompactTextString(m) }
func (*GetCertReq) ProtoMessage()    {}
func (*GetCertReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{7}
}

func (m *GetCertReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertReq.Unmarshal(m, b)
}
func (m *GetCertReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertReq.Marshal(b, m, deterministic)
}
func (m *GetCertReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertReq.Merge(m, src)
}
func (m *GetCertReq) XXX_Size() int {
	return xxx_messageInfo_GetCertReq.Size(m)
}
func (m *GetCertReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertReq proto.InternalMessageInfo

func (m *GetCertReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetCertReq) GetIssuer() []byte {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *GetCertReq) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

type GetCertRsp struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CertUrl              string   `protobuf:"bytes,2,opt,name=cert_url,json=certUrl,proto3" json:"cert_url,omitempty"`
	KeyUrl               string   `protobuf:"bytes,3,opt,name=key_url,json=keyUrl,proto3" json:"key_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertRsp) Reset()         { *m = GetCertRsp{} }
func (m *GetCertRsp) String() string { return proto.CompactTextString(m) }
func (*GetCertRsp) ProtoMessage()    {}
func (*GetCertRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{8}
}

func (m *GetCertRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertRsp.Unmarshal(m, b)
}
func (m *GetCertRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertRsp.Marshal(b, m, deterministic)
}
func (m *GetCertRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertRsp.Merge(m, src)
}
func (m *GetCertRsp) XXX_Size() int {
	return xxx_messageInfo_GetCertRsp.Size(m)
}
func (m *GetCertRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertRsp proto.InternalMessageInfo

func (m *GetCertRsp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetCertRsp) GetCertUrl() string {
	if m != nil {
		return m.CertUrl
	}
	return ""
}

func (m *GetCertRsp) GetKeyUrl() string {
	if m != nil {
		return m.KeyUrl
	}
	return ""
}

type GetSystemIDRsp struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSystemIDRsp) Reset()         { *m = GetSystemIDRsp{} }
func (m *GetSystemIDRsp) String() string { return proto.CompactTextString(m) }
func (*GetSystemIDRsp) ProtoMessage()    {}
func (*GetSystemIDRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{9}
}

func (m *GetSystemIDRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSystemIDRsp.Unmarshal(m, b)
}
func (m *GetSystemIDRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSystemIDRsp.Marshal(b, m, deterministic)
}
func (m *GetSystemIDRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSystemIDRsp.Merge(m, src)
}
func (m *GetSystemIDRsp) XXX_Size() int {
	return xxx_messageInfo_GetSystemIDRsp.Size(m)
}
func (m *GetSystemIDRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSystemIDRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSystemIDRsp proto.InternalMessageInfo

func (m *GetSystemIDRsp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SetUsersReq struct {
	Users                []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUsersReq) Reset()         { *m = SetUsersReq{} }
func (m *SetUsersReq) String() string { return proto.CompactTextString(m) }
func (*SetUsersReq) ProtoMessage()    {}
func (*SetUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{10}
}

func (m *SetUsersReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetUsersReq.Unmarshal(m, b)
}
func (m *SetUsersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetUsersReq.Marshal(b, m, deterministic)
}
func (m *SetUsersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUsersReq.Merge(m, src)
}
func (m *SetUsersReq) XXX_Size() int {
	return xxx_messageInfo_SetUsersReq.Size(m)
}
func (m *SetUsersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUsersReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetUsersReq proto.InternalMessageInfo

func (m *SetUsersReq) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

type GetUsersRsp struct {
	Users                []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUsersRsp) Reset()         { *m = GetUsersRsp{} }
func (m *GetUsersRsp) String() string { return proto.CompactTextString(m) }
func (*GetUsersRsp) ProtoMessage()    {}
func (*GetUsersRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{11}
}

func (m *GetUsersRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUsersRsp.Unmarshal(m, b)
}
func (m *GetUsersRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUsersRsp.Marshal(b, m, deterministic)
}
func (m *GetUsersRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersRsp.Merge(m, src)
}
func (m *GetUsersRsp) XXX_Size() int {
	return xxx_messageInfo_GetUsersRsp.Size(m)
}
func (m *GetUsersRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersRsp proto.InternalMessageInfo

func (m *GetUsersRsp) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

type UsersChangedNtf struct {
	Users                []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UsersChangedNtf) Reset()         { *m = UsersChangedNtf{} }
func (m *UsersChangedNtf) String() string { return proto.CompactTextString(m) }
func (*UsersChangedNtf) ProtoMessage()    {}
func (*UsersChangedNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5a64744234c68b, []int{12}
}

func (m *UsersChangedNtf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsersChangedNtf.Unmarshal(m, b)
}
func (m *UsersChangedNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsersChangedNtf.Marshal(b, m, deterministic)
}
func (m *UsersChangedNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersChangedNtf.Merge(m, src)
}
func (m *UsersChangedNtf) XXX_Size() int {
	return xxx_messageInfo_UsersChangedNtf.Size(m)
}
func (m *UsersChangedNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersChangedNtf.DiscardUnknown(m)
}

var xxx_messageInfo_UsersChangedNtf proto.InternalMessageInfo

func (m *UsersChangedNtf) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*GetCertTypesRsp)(nil), "iamanager.GetCertTypesRsp")
	proto.RegisterType((*ClearReq)(nil), "iamanager.ClearReq")
	proto.RegisterType((*SetOwnerReq)(nil), "iamanager.SetOwnerReq")
	proto.RegisterType((*CreateKeysReq)(nil), "iamanager.CreateKeysReq")
	proto.RegisterType((*CreateKeysRsp)(nil), "iamanager.CreateKeysRsp")
	proto.RegisterType((*ApplyCertReq)(nil), "iamanager.ApplyCertReq")
	proto.RegisterType((*ApplyCertRsp)(nil), "iamanager.ApplyCertRsp")
	proto.RegisterType((*GetCertReq)(nil), "iamanager.GetCertReq")
	proto.RegisterType((*GetCertRsp)(nil), "iamanager.GetCertRsp")
	proto.RegisterType((*GetSystemIDRsp)(nil), "iamanager.GetSystemIDRsp")
	proto.RegisterType((*SetUsersReq)(nil), "iamanager.SetUsersReq")
	proto.RegisterType((*GetUsersRsp)(nil), "iamanager.GetUsersRsp")
	proto.RegisterType((*UsersChangedNtf)(nil), "iamanager.UsersChangedNtf")
}

func init() {
	proto.RegisterFile("iamanager.proto", fileDescriptor_aa5a64744234c68b)
}

var fileDescriptor_aa5a64744234c68b = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0x5d, 0x4f, 0x13, 0x41,
	0x14, 0xa5, 0xd4, 0xd2, 0xf6, 0x5a, 0xc1, 0x8c, 0x02, 0x65, 0x4d, 0x0c, 0x59, 0x1f, 0xf4, 0xc5,
	0x5d, 0x83, 0x4a, 0x62, 0xa2, 0x21, 0xb4, 0x48, 0x43, 0x8c, 0x42, 0x5a, 0x78, 0xf1, 0x85, 0x4c,
	0xdb, 0xcb, 0x32, 0x71, 0x3f, 0xc6, 0x99, 0xad, 0x64, 0xff, 0xad, 0x3f, 0xc5, 0x99, 0xd9, 0xdd,
	0x76, 0x5b, 0xbb, 0x8d, 0xf2, 0x76, 0x3f, 0xce, 0x39, 0x77, 0xf6, 0xee, 0xb9, 0xb0, 0xc5, 0x68,
	0x40, 0x43, 0xea, 0xa1, 0x70, 0xb8, 0x88, 0xe2, 0x88, 0x34, 0xa7, 0x05, 0xeb, 0x99, 0x17, 0x45,
	0x9e, 0x8f, 0xae, 0x69, 0x0c, 0x27, 0x37, 0x2e, 0x06, 0x3c, 0x4e, 0x52, 0x9c, 0xfd, 0x12, 0xb6,
	0x7a, 0x18, 0x77, 0x51, 0xc4, 0x97, 0x09, 0x47, 0xd9, 0x97, 0x9c, 0x3c, 0x85, 0x5a, 0xac, 0xe3,
	0x76, 0x65, 0xbf, 0xfa, 0xaa, 0xd9, 0x4f, 0x13, 0xfb, 0x39, 0x34, 0xba, 0x3e, 0x52, 0xd1, 0xc7,
	0x9f, 0x84, 0xc0, 0x03, 0x5d, 0x54, 0x80, 0x8a, 0x02, 0x98, 0xd8, 0xfe, 0x04, 0x0f, 0x07, 0x18,
	0x9f, 0xdf, 0x85, 0x58, 0x06, 0x21, 0x16, 0x34, 0x38, 0x95, 0xf2, 0x2e, 0x12, 0xe3, 0xf6, 0xba,
	0xa9, 0x4f, 0x73, 0xfb, 0x08, 0x1e, 0x75, 0x05, 0xd2, 0x18, 0xbf, 0x60, 0x22, 0xef, 0x23, 0xf0,
	0x7e, 0x4e, 0x40, 0x7d, 0xc6, 0x32, 0x81, 0xc7, 0x50, 0x1d, 0x49, 0x91, 0x71, 0x75, 0x68, 0x1f,
	0x42, 0xeb, 0x98, 0x73, 0x3f, 0xd1, 0x1b, 0x28, 0x1b, 0xab, 0x6a, 0x23, 0xd5, 0xce, 0x68, 0x26,
	0x56, 0x9f, 0x5b, 0xe0, 0x95, 0x4c, 0xdb, 0x83, 0x86, 0xc6, 0x5e, 0x4f, 0x84, 0x9f, 0x71, 0xeb,
	0x3a, 0xbf, 0x12, 0xbe, 0x7d, 0x01, 0x90, 0xad, 0xbd, 0x6c, 0xe8, 0x0e, 0x6c, 0x30, 0x29, 0x27,
	0x98, 0xbe, 0xb6, 0xd5, 0xcf, 0x32, 0x5d, 0x97, 0x28, 0x18, 0xf5, 0xdb, 0x55, 0x83, 0xce, 0x32,
	0xfb, 0x72, 0xa6, 0xf8, 0xdf, 0xcf, 0x21, 0xbb, 0x50, 0xff, 0x81, 0x89, 0xe9, 0x64, 0xaa, 0x2a,
	0xd5, 0xef, 0xdc, 0x87, 0x4d, 0xa5, 0x3a, 0x48, 0x64, 0x8c, 0xc1, 0xd9, 0x89, 0x56, 0xde, 0x84,
	0x75, 0x36, 0xce, 0x74, 0x55, 0x64, 0xbf, 0x30, 0xff, 0xfd, 0x4a, 0xbd, 0xc2, 0xfc, 0x36, 0x65,
	0x9e, 0x89, 0x8e, 0x73, 0xf3, 0x98, 0x44, 0x83, 0x7a, 0x39, 0x28, 0x75, 0xd8, 0x12, 0x90, 0xb2,
	0xa2, 0x41, 0x74, 0x6f, 0x69, 0xe8, 0xe1, 0xf8, 0x5b, 0x7c, 0xb3, 0x1c, 0x78, 0xf0, 0xbb, 0x06,
	0xcd, 0xb3, 0xe3, 0xaf, 0xa9, 0xbd, 0xc9, 0x09, 0xb4, 0x8a, 0x0e, 0x26, 0x3b, 0x4e, 0xea, 0x77,
	0x27, 0xf7, 0xbb, 0xf3, 0x59, 0xfb, 0xdd, 0xb2, 0x9c, 0xd9, 0x8d, 0x2c, 0x58, 0xde, 0x5e, 0x23,
	0xa7, 0x40, 0x4e, 0x59, 0xc8, 0xe4, 0xed, 0x85, 0x88, 0x7e, 0x31, 0xc9, 0xa2, 0x90, 0x85, 0x5e,
	0xa9, 0x56, 0x49, 0x5d, 0xe9, 0x1c, 0x42, 0xcd, 0x9c, 0x09, 0x79, 0x52, 0x18, 0x97, 0x1f, 0xce,
	0x0a, 0xde, 0x47, 0x68, 0xe4, 0xe7, 0xa3, 0xa6, 0xce, 0xa8, 0x85, 0x9b, 0x5a, 0xc1, 0xee, 0x00,
	0xcc, 0xcc, 0x4f, 0xda, 0xc5, 0xd1, 0xc5, 0xa3, 0xb2, 0x4a, 0x3a, 0x66, 0x03, 0x47, 0xd0, 0x9c,
	0x3a, 0x9a, 0xec, 0x16, 0x80, 0xc5, 0xfb, 0xb0, 0x96, 0x37, 0x8c, 0xc0, 0x07, 0xa8, 0x67, 0x7b,
	0x25, 0xdb, 0x7f, 0xef, 0x5a, 0x93, 0x97, 0x95, 0x0d, 0xb5, 0x63, 0xfc, 0x91, 0xdb, 0xac, 0x74,
	0xed, 0x7b, 0xf3, 0xfc, 0x82, 0x2d, 0xa7, 0x1b, 0x34, 0x0e, 0x5a, 0xdc, 0x60, 0xee, 0xce, 0xd5,
	0xfb, 0xef, 0xcd, 0xd8, 0x65, 0x7f, 0x7d, 0x6e, 0x7c, 0x6e, 0x67, 0xc5, 0x3e, 0x87, 0xed, 0xc1,
	0x64, 0x28, 0x47, 0x82, 0x0d, 0xb1, 0xe8, 0xe1, 0x7f, 0x32, 0xe3, 0x82, 0xe9, 0xed, 0xb5, 0x37,
	0x95, 0xce, 0xbb, 0xef, 0x07, 0x1e, 0x8b, 0xf9, 0x28, 0x76, 0x90, 0xd3, 0xc0, 0x19, 0x45, 0x81,
	0x8b, 0x3c, 0x18, 0xbf, 0xa6, 0xc8, 0x85, 0x4b, 0x23, 0x79, 0xad, 0x2a, 0x41, 0x14, 0xba, 0x94,
	0x33, 0x77, 0xaa, 0x34, 0xdc, 0x30, 0x53, 0xde, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x25, 0x27,
	0xcb, 0x15, 0x0e, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IAManagerClient is the client API for IAManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IAManagerClient interface {
	GetCertTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCertTypesRsp, error)
	FinishProvisioning(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Clear(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SetOwner(ctx context.Context, in *SetOwnerReq, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateKeys(ctx context.Context, in *CreateKeysReq, opts ...grpc.CallOption) (*CreateKeysRsp, error)
	ApplyCert(ctx context.Context, in *ApplyCertReq, opts ...grpc.CallOption) (*ApplyCertRsp, error)
	GetCert(ctx context.Context, in *GetCertReq, opts ...grpc.CallOption) (*GetCertRsp, error)
	GetSystemID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSystemIDRsp, error)
	SetUsers(ctx context.Context, in *SetUsersReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetUsersRsp, error)
	SubscribeUsersChanged(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (IAManager_SubscribeUsersChangedClient, error)
}

type iAManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewIAManagerClient(cc grpc.ClientConnInterface) IAManagerClient {
	return &iAManagerClient{cc}
}

func (c *iAManagerClient) GetCertTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCertTypesRsp, error) {
	out := new(GetCertTypesRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/GetCertTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) FinishProvisioning(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/FinishProvisioning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) Clear(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) SetOwner(ctx context.Context, in *SetOwnerReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/SetOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) CreateKeys(ctx context.Context, in *CreateKeysReq, opts ...grpc.CallOption) (*CreateKeysRsp, error) {
	out := new(CreateKeysRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/CreateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) ApplyCert(ctx context.Context, in *ApplyCertReq, opts ...grpc.CallOption) (*ApplyCertRsp, error) {
	out := new(ApplyCertRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/ApplyCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) GetCert(ctx context.Context, in *GetCertReq, opts ...grpc.CallOption) (*GetCertRsp, error) {
	out := new(GetCertRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/GetCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) GetSystemID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSystemIDRsp, error) {
	out := new(GetSystemIDRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/GetSystemID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) SetUsers(ctx context.Context, in *SetUsersReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/SetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetUsersRsp, error) {
	out := new(GetUsersRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) SubscribeUsersChanged(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (IAManager_SubscribeUsersChangedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IAManager_serviceDesc.Streams[0], "/iamanager.IAManager/SubscribeUsersChanged", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAManagerSubscribeUsersChangedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAManager_SubscribeUsersChangedClient interface {
	Recv() (*UsersChangedNtf, error)
	grpc.ClientStream
}

type iAManagerSubscribeUsersChangedClient struct {
	grpc.ClientStream
}

func (x *iAManagerSubscribeUsersChangedClient) Recv() (*UsersChangedNtf, error) {
	m := new(UsersChangedNtf)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IAManagerServer is the server API for IAManager service.
type IAManagerServer interface {
	GetCertTypes(context.Context, *empty.Empty) (*GetCertTypesRsp, error)
	FinishProvisioning(context.Context, *empty.Empty) (*empty.Empty, error)
	Clear(context.Context, *ClearReq) (*empty.Empty, error)
	SetOwner(context.Context, *SetOwnerReq) (*empty.Empty, error)
	CreateKeys(context.Context, *CreateKeysReq) (*CreateKeysRsp, error)
	ApplyCert(context.Context, *ApplyCertReq) (*ApplyCertRsp, error)
	GetCert(context.Context, *GetCertReq) (*GetCertRsp, error)
	GetSystemID(context.Context, *empty.Empty) (*GetSystemIDRsp, error)
	SetUsers(context.Context, *SetUsersReq) (*empty.Empty, error)
	GetUsers(context.Context, *empty.Empty) (*GetUsersRsp, error)
	SubscribeUsersChanged(*empty.Empty, IAManager_SubscribeUsersChangedServer) error
}

// UnimplementedIAManagerServer can be embedded to have forward compatible implementations.
type UnimplementedIAManagerServer struct {
}

func (*UnimplementedIAManagerServer) GetCertTypes(ctx context.Context, req *empty.Empty) (*GetCertTypesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertTypes not implemented")
}
func (*UnimplementedIAManagerServer) FinishProvisioning(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishProvisioning not implemented")
}
func (*UnimplementedIAManagerServer) Clear(ctx context.Context, req *ClearReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (*UnimplementedIAManagerServer) SetOwner(ctx context.Context, req *SetOwnerReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOwner not implemented")
}
func (*UnimplementedIAManagerServer) CreateKeys(ctx context.Context, req *CreateKeysReq) (*CreateKeysRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeys not implemented")
}
func (*UnimplementedIAManagerServer) ApplyCert(ctx context.Context, req *ApplyCertReq) (*ApplyCertRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCert not implemented")
}
func (*UnimplementedIAManagerServer) GetCert(ctx context.Context, req *GetCertReq) (*GetCertRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCert not implemented")
}
func (*UnimplementedIAManagerServer) GetSystemID(ctx context.Context, req *empty.Empty) (*GetSystemIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemID not implemented")
}
func (*UnimplementedIAManagerServer) SetUsers(ctx context.Context, req *SetUsersReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUsers not implemented")
}
func (*UnimplementedIAManagerServer) GetUsers(ctx context.Context, req *empty.Empty) (*GetUsersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedIAManagerServer) SubscribeUsersChanged(req *empty.Empty, srv IAManager_SubscribeUsersChangedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeUsersChanged not implemented")
}

func RegisterIAManagerServer(s *grpc.Server, srv IAManagerServer) {
	s.RegisterService(&_IAManager_serviceDesc, srv)
}

func _IAManager_GetCertTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).GetCertTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/GetCertTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).GetCertTypes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_FinishProvisioning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).FinishProvisioning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/FinishProvisioning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).FinishProvisioning(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).Clear(ctx, req.(*ClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_SetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).SetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/SetOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).SetOwner(ctx, req.(*SetOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_CreateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).CreateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/CreateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).CreateKeys(ctx, req.(*CreateKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_ApplyCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyCertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).ApplyCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/ApplyCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).ApplyCert(ctx, req.(*ApplyCertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_GetCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).GetCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/GetCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).GetCert(ctx, req.(*GetCertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_GetSystemID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).GetSystemID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/GetSystemID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).GetSystemID(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_SetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).SetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/SetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).SetUsers(ctx, req.(*SetUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).GetUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_SubscribeUsersChanged_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAManagerServer).SubscribeUsersChanged(m, &iAManagerSubscribeUsersChangedServer{stream})
}

type IAManager_SubscribeUsersChangedServer interface {
	Send(*UsersChangedNtf) error
	grpc.ServerStream
}

type iAManagerSubscribeUsersChangedServer struct {
	grpc.ServerStream
}

func (x *iAManagerSubscribeUsersChangedServer) Send(m *UsersChangedNtf) error {
	return x.ServerStream.SendMsg(m)
}

var _IAManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iamanager.IAManager",
	HandlerType: (*IAManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertTypes",
			Handler:    _IAManager_GetCertTypes_Handler,
		},
		{
			MethodName: "FinishProvisioning",
			Handler:    _IAManager_FinishProvisioning_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _IAManager_Clear_Handler,
		},
		{
			MethodName: "SetOwner",
			Handler:    _IAManager_SetOwner_Handler,
		},
		{
			MethodName: "CreateKeys",
			Handler:    _IAManager_CreateKeys_Handler,
		},
		{
			MethodName: "ApplyCert",
			Handler:    _IAManager_ApplyCert_Handler,
		},
		{
			MethodName: "GetCert",
			Handler:    _IAManager_GetCert_Handler,
		},
		{
			MethodName: "GetSystemID",
			Handler:    _IAManager_GetSystemID_Handler,
		},
		{
			MethodName: "SetUsers",
			Handler:    _IAManager_SetUsers_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _IAManager_GetUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeUsersChanged",
			Handler:       _IAManager_SubscribeUsersChanged_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "iamanager.proto",
}
