// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iamanagerpublic.proto

package iamanager // import "gitpct.epam.com/epmd-aepr/aos_common/api/iamanager"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetPermissionsReq struct {
	Secret               string   `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	FunctionalServerId   string   `protobuf:"bytes,2,opt,name=functional_server_id,json=functionalServerId,proto3" json:"functional_server_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPermissionsReq) Reset()         { *m = GetPermissionsReq{} }
func (m *GetPermissionsReq) String() string { return proto.CompactTextString(m) }
func (*GetPermissionsReq) ProtoMessage()    {}
func (*GetPermissionsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanagerpublic_0549eba738ddf865, []int{0}
}
func (m *GetPermissionsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPermissionsReq.Unmarshal(m, b)
}
func (m *GetPermissionsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPermissionsReq.Marshal(b, m, deterministic)
}
func (dst *GetPermissionsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionsReq.Merge(dst, src)
}
func (m *GetPermissionsReq) XXX_Size() int {
	return xxx_messageInfo_GetPermissionsReq.Size(m)
}
func (m *GetPermissionsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionsReq proto.InternalMessageInfo

func (m *GetPermissionsReq) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *GetPermissionsReq) GetFunctionalServerId() string {
	if m != nil {
		return m.FunctionalServerId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetPermissionsReq)(nil), "iamanager.GetPermissionsReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IAManagerPublicClient is the client API for IAManagerPublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IAManagerPublicClient interface {
	GetPermissions(ctx context.Context, in *GetPermissionsReq, opts ...grpc.CallOption) (*Permissions, error)
}

type iAManagerPublicClient struct {
	cc *grpc.ClientConn
}

func NewIAManagerPublicClient(cc *grpc.ClientConn) IAManagerPublicClient {
	return &iAManagerPublicClient{cc}
}

func (c *iAManagerPublicClient) GetPermissions(ctx context.Context, in *GetPermissionsReq, opts ...grpc.CallOption) (*Permissions, error) {
	out := new(Permissions)
	err := c.cc.Invoke(ctx, "/iamanager.IAManagerPublic/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAManagerPublicServer is the server API for IAManagerPublic service.
type IAManagerPublicServer interface {
	GetPermissions(context.Context, *GetPermissionsReq) (*Permissions, error)
}

func RegisterIAManagerPublicServer(s *grpc.Server, srv IAManagerPublicServer) {
	s.RegisterService(&_IAManagerPublic_serviceDesc, srv)
}

func _IAManagerPublic_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerPublicServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManagerPublic/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerPublicServer).GetPermissions(ctx, req.(*GetPermissionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IAManagerPublic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iamanager.IAManagerPublic",
	HandlerType: (*IAManagerPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPermissions",
			Handler:    _IAManagerPublic_GetPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iamanagerpublic.proto",
}

func init() {
	proto.RegisterFile("iamanagerpublic.proto", fileDescriptor_iamanagerpublic_0549eba738ddf865)
}

var fileDescriptor_iamanagerpublic_0549eba738ddf865 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x5d, 0x0f, 0x0b, 0x9b, 0x83, 0x62, 0xd0, 0x65, 0x59, 0x3c, 0xc8, 0x9e, 0xbc, 0x98,
	0xc8, 0xea, 0x1f, 0xd0, 0x8b, 0xee, 0x41, 0x28, 0xf5, 0xa6, 0x48, 0x99, 0xa6, 0x63, 0x19, 0x68,
	0x32, 0x31, 0x49, 0xfd, 0xfd, 0x42, 0x2a, 0x6d, 0xc5, 0x63, 0xf2, 0x3d, 0xe6, 0x7d, 0x4f, 0x5c,
	0x10, 0x58, 0x70, 0xd0, 0x62, 0xf0, 0x7d, 0xdd, 0x91, 0x51, 0x3e, 0x70, 0x62, 0xb9, 0x1a, 0xbf,
	0xb7, 0x53, 0xc2, 0xb0, 0xb5, 0xec, 0x86, 0xc4, 0xee, 0x43, 0x9c, 0x3d, 0x61, 0x2a, 0x30, 0x58,
	0x8a, 0x91, 0xd8, 0xc5, 0x12, 0xbf, 0xe4, 0x5a, 0x2c, 0x23, 0x9a, 0x80, 0x69, 0xb3, 0xb8, 0x5a,
	0x5c, 0xaf, 0xca, 0xdf, 0x97, 0xbc, 0x15, 0xe7, 0x9f, 0xbd, 0x33, 0x89, 0xd8, 0x41, 0x57, 0x45,
	0x0c, 0xdf, 0x18, 0x2a, 0x6a, 0x36, 0xc7, 0x39, 0x25, 0x27, 0xf6, 0x9a, 0xd1, 0xa1, 0xd9, 0xbf,
	0x8b, 0xd3, 0xc3, 0xc3, 0xcb, 0xd0, 0x5b, 0x64, 0x33, 0xf9, 0x2c, 0x4e, 0xfe, 0x36, 0xca, 0x4b,
	0x35, 0xba, 0xa9, 0x7f, 0x32, 0xdb, 0xf5, 0x8c, 0xce, 0xd0, 0xee, 0xe8, 0xf1, 0xfe, 0x6d, 0xdf,
	0x52, 0xf2, 0x26, 0x29, 0xf4, 0x60, 0x95, 0x61, 0xab, 0xd1, 0xdb, 0xe6, 0x06, 0xd0, 0x07, 0x0d,
	0x1c, 0xab, 0x61, 0xa9, 0x06, 0x4f, 0x7a, 0xbc, 0x51, 0x2f, 0xf3, 0xf0, 0xbb, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x09, 0x14, 0xd4, 0x8c, 0x33, 0x01, 0x00, 0x00,
}
